#!/usr/bin/env python

# Copyright 2019 Danish Technological Institute (DTI)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Mads Vainoe Baatrup

import rospy
import tf2_ros
import yaml
# import pluginlib
import os
import json

from pattern_manager import plugin
from pattern_manager import XForm
from pattern_manager import srv as pm_srv
from pattern_manager import msg as pm_msg
from pattern_manager import util
from std_srvs.srv import Trigger, TriggerResponse
from collections import OrderedDict
from visualization_msgs.msg import MarkerArray


class PatternManagerNode(object):
    """
    This class serves as the node interface for the pattern manager package
    """

    def __init__(self):
        plugin_loader = plugin.PluginLoader('pattern_manager.plugins')
        self.plugins = plugin_loader.plugins
        self.plugin = None

        self.root = XForm(name='root', parent=None, ref_frame='world')

        rospy.Service('~get_transform_info', pm_srv.GetTransformParams, self._cb_get_transform_info)
        rospy.Service('~get_children_info', pm_srv.GetTransforms, self._cb_get_children_info)
        rospy.Service('~get_children', pm_srv.GetChildren, self._cb_get_children)
        rospy.Service('~get_transform_id', pm_srv.GetTransformId, self._cb_get_transform_id)
        rospy.Service('~get_transform_name', pm_srv.GetTransformName, self._cb_get_transform_name)
        rospy.Service('~get_transforms', pm_srv.GetIds, self._cb_get_transforms)
        rospy.Service('~get_transforms_info', pm_srv.GetTransformsInfo, self._cb_get_transforms_info)
        rospy.Service('~create_transform', pm_srv.CreateTransform, self._cb_create_transform)
        rospy.Service('~set_active', pm_srv.SetActive, self._cb_set_active)
        rospy.Service('~remove_transform', pm_srv.TransformId, self._cb_remove_transform)
        rospy.Service('~iterate', Trigger, self._cb_iterate)
        rospy.Service('~update_transform', pm_srv.UpdateTransform, self._cb_update_transform)
        rospy.Service('~get_current_transform', pm_srv.GetCurrentId, self._cb_get_current_transform)
        rospy.Service('~get_active_transforms', pm_srv.GetIds, self._cb_get_active_transforms)
        rospy.Service('~get_active_transforms_info', pm_srv.GetTransformsInfo, self._cb_get_active_transforms_info)
        rospy.Service('~create_linear_pattern', pm_srv.CreateLinearPattern, self._cb_create_linear_pattern)
        rospy.Service('~create_rectangular_pattern', pm_srv.CreateRectangularPattern, self._cb_create_rectangular_pattern)
        rospy.Service('~create_circular_pattern', pm_srv.CreateCircularPattern, self._cb_create_circular_pattern)
        rospy.Service('~create_scatter_pattern', pm_srv.CreateScatterPattern, self._cb_create_scatter_pattern)
        rospy.Service('~create_honeycomb_pattern', pm_srv.CreateHoneycombPattern, self._cb_create_honeycomb_pattern)
        rospy.Service('~set_iteration_order', pm_srv.SetIterationOrder, self._cb_set_iteration_order)
        rospy.Service('~set_transform_parent', pm_srv.SetParent, self._cb_set_transform_parent)
        rospy.Service('~save', pm_srv.Filename, self._cb_save)
        rospy.Service('~load', pm_srv.Filename, self._cb_load)
        rospy.Service('~print_tree', Trigger, self._cb_print_tree)
        rospy.Service('~set_name', pm_srv.SetName, self._cb_set_name)
        rospy.Service('~set_reference_frame', pm_srv.SetName, self._cb_set_ref_frame)
        rospy.Service('~set_translation', pm_srv.SetTranslation, self._cb_set_translation)
        rospy.Service('~set_rotation', pm_srv.SetRotation, self._cb_set_rotation)

    def _cb_get_children(self, req):
        """
        This callback function retrieves the names and ids of all child XForm objects of a specified parent

        :param req: A request object containing the parent ID of the children to retrieve
        :type req: GetChildrenRequest
        :return: A response object containing a list of names and ids of each child XForm of the requested parent
        :rtype: GetChildrenResponse
        """

        rospy.logdebug("Received request to retrieve all child transforms")
        resp = pm_srv.GetChildrenResponse()

        try:
            parent = self.root.get_node(req.parent_id)
            for n in self.root.get_nodes(root=parent):

                if id(n) == req.parent_id:
                    continue

                name_and_id = pm_msg.NameAndId()
                name_and_id.name = n.name
                name_and_id.id = id(n)
                resp.names_and_ids.append(name_and_id)
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_get_active_transforms_info(self, req):
        """
        This callback function retrieves object info of all active XForm objects

        :param req: An empty request object
        :type req: GetTransformsInfoRequest
        :return: A response object containing a list of information on each active XForm object
        :rtype: GetTransformsInfoResponse
        """

        rospy.logdebug("Received request to retrieve info of all active transforms")
        resp = pm_srv.GetTransformsInfoResponse()

        try:
            for t in self.root.get_active_nodes():
                t_params = pm_msg.Params()
                t_params.name = t.name
                t_params.parent_id = id(t)
                t_params.id = id(t)
                t_params.ref_frame = t.ref_frame
                t_params.active = t.active
                t_params.translation = t.translation
                t_params.rotation = t.rotation
                t_params.number = t.number

                if t.parent:
                    t_params.parent_id = id(t.parent)

                resp.transforms.append(t_params)
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_get_transforms_info(self, req):
        """
        This callback function retrieves object info of all XForm objects

        :param req: An empty request object
        :type req: GetTransformsInfoRequest
        :return: A response object containing a list of information on each XForm object
        :rtype: GetTransformsInfoResponse
        """

        rospy.logdebug("Received request to retrieve info of all transforms")
        resp = pm_srv.GetTransformsInfoResponse()

        try:
            for t in self.root.get_nodes():
                t_params = pm_msg.Params()
                t_params.name = t.name
                t_params.parent_id = id(t)
                t_params.id = id(t)
                t_params.ref_frame = t.ref_frame
                t_params.active = t.active
                t_params.translation = t.translation
                t_params.rotation = t.rotation
                t_params.number = t.number

                if t.parent:
                    t_params.parent_id = id(t.parent)

                resp.transforms.append(t_params)
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_get_transform_name(self, req):
        """
        This callback function retrieves an XForm's name by ID

        :param req: A request object containing the ID of the XForm
        :type req: GetTransformNameRequest
        :return: A response object containing the name of the XForm object
        :rtype: GetTransformNameResponse
        """

        rospy.logdebug("Received request to retrieve transform name")
        resp = pm_srv.GetTransformNameResponse()

        try:
            for n in self.root.get_nodes():
                if id(n) == req.id:

                    if not tf_prefix:
                        resp.name = n.name  
                    else:
                        resp.name = tf_prefix + '/' + n.name
        
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_set_name(self, req):
        """
        This callback function sets an XForm's name

        :param req: A request object containing the ID of the XForm
        :type req: SetNameRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetNameResponse
        """

        rospy.logdebug("Received request to set transform name")
        resp = pm_srv.SetNameResponse()

        try:
            t = self.root.get_node(req.id)
            t.name = req.name
            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_set_ref_frame(self, req):
        """
        This callback function sets an XForm's reference frame

        :param req: A request object containing the ID of the XForm
        :type req: SetNameRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetNameResponse
        """

        rospy.logdebug("Received request to set transform reference frame")
        resp = pm_srv.SetNameResponse()

        try:
            t = self.root.get_node(req.id)
            t.ref_frame = req.name
            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_set_rotation(self, req):
        """
        This callback function sets an XForm's rotation

        :param req: A request object containing the ID of the XForm
        :type req: SetRotationRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetRotationResponse
        """

        rospy.logdebug("Received request to set transform rotation")
        resp = pm_srv.SetRotationResponse()

        try:
            t = self.root.get_node(req.id)
            t.rotation = req.rotation
            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_set_translation(self, req):
        """
        This callback function sets an XForm's translation

        :param req: A request object containing the ID of the XForm
        :type req: SetTranslationRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetTranslationResponse
        """

        rospy.logdebug("Received request to set transform translation")
        resp = pm_srv.SetTranslationResponse()

        try:
            t = self.root.get_node(req.id)
            t.translation = req.translation
            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_get_children_info(self, req):
        """
        This callback function retrieves XForm children of a parent XForm

        :param req: A request object containing the ID of the parent XForm
        :type req: GetTransformsRequest
        :return: A response object containing a list of XForms which contain the XForms' name, ID, parent ID,
        reference frame, if active, translation, rotation, and number
        :rtype: GetTransformsResponse
        """

        rospy.logdebug("Received request retrieve transforms")
        resp = pm_srv.GetTransformsResponse()

        try:
            parent = self.root.get_node(req.parent_id)
            for t in self.root.get_nodes(root=parent):

                if id(t) == req.parent_id:
                    continue

                t_params = pm_msg.Params()
                t_params.name = t.name
                t_params.parent_id = id(t)
                t_params.id = id(t)
                t_params.ref_frame = t.ref_frame
                t_params.active = t.active
                t_params.translation = t.translation
                t_params.rotation = t.rotation
                t_params.number = t.number

                if t.parent:
                    t_params.parent_id = id(t.parent)

                resp.transforms.append(t_params)

        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_print_tree(self, req):
        """
        This callback function prints the XForm tree in the node output

        :param req: An empty request object
        :type req: TriggerRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: TriggerResponse
        """

        rospy.logdebug("Received request print transform tree")
        resp = TriggerResponse()

        try:
            dict_ = self.root.to_dict()
            rospy.logout(json.dumps(dict_, sort_keys=True, indent=4, separators=(',', ':')))

            resp.message = 'Tree sent to node output'
            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_get_transform_id(self, req):
        """
        This callback function retrieves an XForm ID from a supplied XForm name

        :param req: A request object containing the transform name
        :type req: GetTransformIdRequest
        :return: A response object containing the transform ID
        :rtype: GetTransformIdResponse
        """

        rospy.logdebug("Received request to retrieve transform id")
        resp = pm_srv.GetTransformIdResponse()

        try:
            for n in self.root.get_nodes():
                if n.name == req.name:
                    resp.id = id(n)
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_load(self, req):
        """
        This callback function loads a .yaml file into a dictionary to create an XForm tree from

        :param req: A request object containing the path of the .yaml file to load
        :type req: FileNameRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: FileNameResponse
        """

        rospy.logdebug("Received request to load tree")
        resp = pm_srv.FilenameResponse()

        try:
            with open(req.path, 'r') as file_:
                tree = yaml.safe_load(file_)

            self.root.recursive_remove_node(id(self.root))
            self.root.from_dict(tree)

            file_.close()

            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_save(self, req):
        """
        This callback function saves the XForm tree to a .yaml file representation

        :param req: A request object containing the filename of the .yaml file to save
        :type req: FileNameRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: FileNameResponse
        """

        rospy.logdebug("Received request to save tree")
        resp = pm_srv.FilenameResponse()

        try:
            with open(req.path, 'w') as file_:
                yaml.dump(self.root.to_dict(), file_)

            file_.close()

            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_set_transform_parent(self, req):
        """
        This callback function sets the parent object of an XForm

        :param req: A request object containing the ID of the XForm and the ID of the parent
        :type req: SetParentRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetParentResponse
        """

        rospy.logdebug("Received request to move transform")
        resp = pm_srv.SetParentResponse()

        try:
            t = self.root.get_node(req.id)
            new_parent = self.root.get_node(req.parent_id)

            new_parent.add_node(t)

            t.ref_frame = new_parent.name
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_get_transforms(self, req):
        """
        This callback function retrieves the IDs and names of all currently existing XForm objects

        :param req: An empty request object
        :type req: GetIdsRequest
        :return: A response object containing a list of IDs and names each associated with an ID
        :rtype: GetIdsResponse
        """

        rospy.logdebug("Received request to retrieve all transform ids")
        resp = pm_srv.GetIdsResponse()

        try:
            for n in self.root.get_nodes():
                name_and_id = pm_msg.NameAndId()
                name_and_id.name = n.name
                name_and_id.id = id(n)
                resp.names_and_ids.append(name_and_id)

            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_set_iteration_order(self, req):
        """
        This callback function sets the order of an XForms children

        :param req: A request object containing an XForm ID and a list of child IDs in a fixed order
        :type req: SetIterationOrderRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetIterationOrderResponse
        """

        rospy.logdebug("Received request to set iteration order")
        resp = pm_srv.SetIterationOrderResponse()

        try:
            t = self.root.get_node(req.id)

            ordered = OrderedDict()
            for k in req.order:
                ordered[k] = t.children[k]

            t.children = ordered

            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_create_linear_pattern(self, req):
        """
        This callback function creates a pattern of XForms in a linear shape

        :param req: A request object containing the number of points, step size, and length of the pattern
        :type req: CreateLinearPatternRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateLinearPatternResponse
        """

        rospy.logdebug("Received request to create a linear pattern")
        resp = pm_srv.CreateLinearPatternResponse()

        try:
            args = [req.num_points, req.step_size, req.length]

            t = XForm(self.root.get_node(req.parent.parent_id), name=req.parent.name)
            t.translation = req.parent.translation

            if not util.is_zero_element(req.parent.rotation):
                t.rotation = req.parent.rotation

            self.plugin = self.plugins['pattern_linear'](t, *args)
            self.plugin.process()

            rospy.logout("Linear pattern successfully created!")
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_create_rectangular_pattern(self, req):
        """
        This callback function creates a pattern of XForms in a rectangular shape

        :param req: A request object containing the number of points, step sizes, and lengths of the pattern
        :type req: CreateRectangularPatternRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateRectangularPatternResponse
        """

        rospy.logdebug("Received request to create a rectangular pattern")
        resp = pm_srv.CreateRectangularPatternResponse()

        try:
            args = [req.num_points, req.step_sizes, req.lengths]

            t = XForm(self.root.get_node(req.parent.parent_id), name=req.parent.name)
            t.translation = req.parent.translation

            if not util.is_zero_element(req.parent.rotation):
                t.rotation = req.parent.rotation

            self.plugin = self.plugins['pattern_rectangular'](t, *args)
            self.plugin.process()

            rospy.logout("Rectangular pattern successfully created!")
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_create_scatter_pattern(self, req):
        """
        This callback function creates a pattern of XForms in a scatter pattern

        :param req: A request object containing a list of points to create XForms for
        :type req: CreateScatterPatternRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateScatterPatternResponse
        """
        rospy.logdebug("Received request to create a rectangular pattern")
        resp = pm_srv.CreateScatterPatternResponse()

        try:
            points = []
            for p in req.points:
                points.append(p.point)

            args = [points]

            t = XForm(self.root.get_node(req.parent.parent_id), name=req.parent.name)
            t.translation = req.parent.translation

            if not util.is_zero_element(req.parent.rotation):
                t.rotation = req.parent.rotation

            self.plugin = self.plugins['pattern_scatter'](t, *args)
            self.plugin.process()

            rospy.logout("Scatter pattern successfully created!")
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_create_circular_pattern(self, req):
        """
        This callback function creates a pattern of XForms in a circular shape

        :param req: A request object containing the number of points, radius, if counter-clockwise,
        and if tangent rotation
        :type req: CreateCircularPatternRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateCircularPatternResponse
        """

        rospy.logdebug("Received request to create a circular pattern")
        resp = pm_srv.CreateCircularPatternResponse()

        try:
            args = [req.num_points, req.radius, req.tan_rot, req.cw]

            t = XForm(self.root.get_node(req.parent.parent_id), name=req.parent.name)
            t.translation = req.parent.translation

            if not util.is_zero_element(req.parent.rotation):
                t.rotation = req.parent.rotation

            self.plugin = self.plugins['pattern_circular'](t, *args)
            self.plugin.process()

            rospy.logout("Circular pattern successfully created!")
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_create_honeycomb_pattern(self, req):
        """
        This callback function creates a pattern of XForms in an honeycomb shape

        :param req: A request object containing the number of points, step sizes, and lengths of the pattern
        :type req: CreateHoneycombPatternRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateHoneycombPatternResponse
        """

        rospy.logdebug("Received request to create an honeycomb pattern")
        resp = pm_srv.CreateHoneycombPatternResponse()

        try:
            args = [req.num_points, req.step_sizes, req.lengths]

            t = XForm(self.root.get_node(req.parent.parent_id), name=req.parent.name)
            t.translation = req.parent.translation

            if not util.is_zero_element(req.parent.rotation):
                t.rotation = req.parent.rotation

            self.plugin = self.plugins['pattern_honeycomb'](t, *args)
            self.plugin.process()

            rospy.logout("Honeycomb pattern successfully created!")
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_get_active_transforms(self, req):
        """
        This callback function retrieves all names and IDs of active XForms

        :param req: An empty request object
        :type req: GetIdsRequest
        :return: A response object containing a list of names and IDs
        :rtype: GetIdsResponse
        """

        rospy.logdebug("Received request to retrieve active transform ids")
        resp = pm_srv.GetIdsResponse()

        try:
            for n in self.root.get_active_nodes():
                name_and_id = pm_msg.NameAndId()
                name_and_id.name = n.name
                name_and_id.id = id(n)
                resp.names_and_ids.append(name_and_id)

            resp.success = True
        except rospy.ROSException as e:
            resp.success = False
            rospy.logerr(e)

        return resp

    def _cb_get_current_transform(self, req):
        """
        This callback function retrieves the name and ID of the current XForm in the iteration

        :param req: An empty request object
        :type req: GetCurrentIdRequest
        :return: A response object containing the name and ID of the XForm which is current in the iteration
        :rtype: GetCurrentIdResponse
        """

        rospy.logdebug("Received request to retrieve current transform id")
        resp = pm_srv.GetCurrentIdResponse()

        node = self.root.get_current_node()

        if node:
            resp.id = id(node)

            if not tf_prefix:
                resp.name = node.name  
            else:
                resp.name = tf_prefix + '/' + node.name
   
            resp.success = True
        else:
            resp.success = False

        return resp

    def _cb_iterate(self, req):
        """
        This callback function triggers an iteration of the currently active XForms

        :param req: An empty request object
        :type req: TriggerRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: TriggerResponse
        """

        rospy.logdebug('Received request to iterate')
        resp = TriggerResponse()

        self.root.iterate()

        cur_node = self.root.get_current_node()
        if cur_node:
            resp.message = 'New current transform: {}'.format(self.root.get_current_node())
            resp.success = True
        else:
            resp.success = False

        return resp

    def _cb_update_transform(self, req):
        """
        This callback function updates an existing XForm object's attributes

        :param req: A request object containing an XForm ID, name, reference frame, translation, and rotation
        :type req: UpdateTransformRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: UpdateTransformResponse
        """

        rospy.logdebug('Received request to update transform %s' % req.id)
        resp = pm_srv.UpdateTransformResponse()

        try:
            n = self.root.get_node(req.id)

            if req.name != '':
                n.name = req.name
            if req.ref_frame != '':
                n.ref_frame = req.ref_frame
            if not req.translation.x == req.translation.y == req.translation.z == 0.0:
                n.translation = req.translation
            if not util.is_zero_element(req.rotation):
                n.rotation = req.rotation
            if not req.active == n.active:
                n.active = req.active

            rospy.logout("Transform %s succesfully updated" % req.id)
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_get_transform_info(self, req):
        """
        This callback function retrieves various attributes of an XForm

        :param req: A request object containing the ID of the XForm
        :type req: GetTransformParamsRequest
        :return: A response object containing an object which contains the XForm's name, ID, parent ID,
        reference frame, if active, translation, rotation, and number
        :rtype: GetTransformParamsResponse
        """

        rospy.logdebug("Received request to retrieve all transforms")
        resp = pm_srv.GetTransformParamsResponse()

        try:
            t = self.root.get_node(req.id)

            t_params = pm_msg.Params()
            t_params.name = t.name
            t_params.parent_id = id(t)
            t_params.id = id(t)
            t_params.ref_frame = t.ref_frame
            t_params.active = t.active
            t_params.translation = t.translation
            t_params.rotation = t.rotation
            t_params.number = t.number

            if t.parent:
                t_params.parent_id = id(t.parent)

            resp.params = t_params
        except rospy.ROSException as e:
            rospy.logerr(e)

        return resp

    def _cb_create_transform(self, req):
        """
        This callback function creates a new XForm object

        :param req: A request object containing a parent ID, a name, and a reference frame for the new XForm object
        :type req: CreateTransformRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: CreateTransformResponse
        """

        rospy.logdebug("Received request to create transform")
        resp = pm_srv.CreateTransformResponse()

        if not req.params.name:
            rospy.logwarn("Transform must have a name")
            resp.success = False

            return resp

        try:
            parent = self.root.get_node(req.params.parent_id)
            t = XForm(parent, name=req.params.name, ref_frame=parent.name)
            t.translation = req.params.translation

            if not util.is_zero_element(req.params.rotation):
                t.rotation = req.params.rotation

            rospy.logout("Transform {} successfully created!".format(req.params.name))
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_set_active(self, req):
        """
        This callback function sets a transforms active attribute to the requested value (`True`/`False`)

        :param req: A request object containing an XForm ID
        :type req: SetActiveRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: SetActiveResponse
        """

        rospy.logdebug('Received request to set active transform %s', req.id)
        resp = pm_srv.SetActiveResponse()

        try:
            self.root.get_node(req.id).set_active(req.active)

            rospy.logout("Transform {} successfully (de)activated!".format(req.id))
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp

    def _cb_remove_transform(self, req):
        """
        This callback function recursively removes an XForm an all of its descendants

        :param req: A request object containing an XForm ID
        :type req: TransformIdRequest
        :return: A response object containing a boolean whether the call was successful or not
        :rtype: TransformIdResponse
        """

        rospy.logdebug('Received request to remove transform %s', req.id)
        resp = pm_srv.TransformIdResponse()

        try:
            if id(self.root) == req.id:
                rospy.logwarn("Removing root is not allowed. Ignoring action")
                resp.success = False

                return resp

            self.root.recursive_remove_node(req.id)
            rospy.logout("Transform {} successfully removed!".format(req.id))
            resp.success = True
        except rospy.ROSException as e:
            rospy.logerr(e)
            resp.success = False

        return resp


if __name__ == "__main__":
    
    # Node
    rospy.init_node("pattern_manager", log_level=rospy.INFO)

    # Parameters
    tf_prefix = rospy.get_param("~tf_prefix", default='')

    # TF2
    tf_broadcaster = tf2_ros.TransformBroadcaster()
    
    # Published Topics
    visualization_marker_array_pub = rospy.Publisher("/visualization_marker_array", MarkerArray, queue_size=10)


    # Pattern Manager
    pmn = PatternManagerNode()
    rospy.loginfo("Pattern manager node started")

    # Loop
    rate = rospy.Rate(5)
    while not rospy.is_shutdown():
        nodes = pmn.root.get_nodes(pmn.root)
        actv_nodes = pmn.root.get_active_nodes(pmn.root)

        util.broadcast_transforms(tf_broadcaster, nodes, tf_prefix)
        util.publish_markers(visualization_marker_array_pub, actv_nodes, pmn.root, tf_prefix)

        rate.sleep()
